---
import { z } from "zod";
export const partial = true;

if (Astro.request.method === "POST") {
  // 1. Get the data and validate it
  const data = await Astro.request.formData();
  const email = String(data.get("email"));
  const password = String(data.get("password"));

  const result = z
    .object({
      email: z
        .string({
          invalid_type_error: "Invalid email",
          required_error: "Email is required",
        })
        .trim()
        .toLowerCase()
        .min(1, "Email is required")
        .email(),
      password: z
        .string({
          invalid_type_error: "Invalid password",
          required_error: "Password is required",
        })
        .min(6, "Password must be atlest 6 digit long"),
    })
    .safeParse({ email, password });

  if (!result.success) {
    return new Response(JSON.stringify(result.error.errors[0].message), {
      status: 200,
      statusText: "Bad Request",
      headers: {
        "HX-Retarget": "#error",
      },
    });
  }

  // 2. Start the login process
  try {
    await Astro.locals.pb.collection("users").authWithPassword(email, password);

    return new Response("Logged in", {
      status: 200,
      statusText: "OK",
      headers: {
        "HX-Redirect": "/",
      },
    });
  } catch (error) {
    return new Response("User not found", {
      status: 200,
      statusText: "Unauthorized",
      headers: {
        "HX-Retarget": "#error",
      },
    });
  }
}
---
